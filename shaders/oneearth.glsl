#version 330in vec2 texCoords;out vec4 outColor;uniform float iGlobalTime;uniform vec2 iResolution;uniform vec3 iMouse;uniform sampler2D iChannel0;//Sphere mapping by nimitz (twitter: @stormoid)/*	Little demo of different sphere uv mapping techniques.*/#define time iGlobalTimemat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}vec3 hsv2rgb( in vec3 c ){    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );	return c.z * mix( vec3(1.0), rgb, c.y);}vec3 tex(in vec2 p){    float frq =50.3;    p += 0.405;    return vec3(1.)*smoothstep(.9, 1.05, max(sin((p.x)*frq),sin((p.y)*frq)));}//Spherical coordinates, very heavy deformation on the polesvec3 sphproj(in vec3 p){	p = normalize(p);    vec2 sph = vec2(acos(p.y/length(p))/3.1415, atan(p.z,p.x)/3.1415*0.5+0.5);    return vec3(sph,0.0);/*    vec3 col = tex(sph*.9);    col.x = sph.x*0.4;    return hsv2rgb(vec3(col.x,.8,col.z));*/}float iSphere(in vec3 ro, in vec3 rd){    vec3 oc = ro;    float b = dot(oc, rd);    float c = dot(oc,oc) - 1.;    float h = b*b - c;    if(h <0.0) return -1.;    return -b - sqrt(h);}void main(  ){		vec2 p =texCoords.xy-0.5;	p.x*=iResolution.x/iResolution.y;	vec2 um = iMouse.xy / iResolution.xy-.5;	um.x *= iResolution.x/iResolution.y;    p*= 1.5;	    //camera	vec3 ro = vec3(0.5,0.,2);    vec3 rd = normalize(vec3(p,-1.5));    mat2 mx = mm2(time*.4+um.x*5.);    mat2 my = mm2(time*0.3+um.y*5.);     ro.xz *= mx;rd.xz *= mx;    ro.xy *= my;rd.xy *= my;        float sel = mod(floor(time*0.3),4.);        float t = iSphere(ro,rd);    vec3 col = vec3(0.0);            if (t > 0.)    {    	vec3 pos = ro+rd*t;    	 //col = texture2D(iChannel0,sphproj(pos).xy).xyz;	vec2 uvs = sphproj(pos).yx;	col = texture2D(iChannel0,uvs).xyz;    }    	outColor = vec4(col, 1.0);}