EnableExplicit
; -----------------------------------------------------------------------------------
; Mortom Code Module Declaration
; -----------------------------------------------------------------------------------
DeclareModule Morton
  Structure Point2D_t
    x.l
    y.l
  EndStructure
  
  Structure Point3D_t
    x.l
    y.l
    z.l
  EndStructure
  
  
  #EIGHTBIT2DMASK = $000000FF
  #EIGHTBIT3DMASK = $000000FF
  #NINEBIT3DMASK = $000001FF

  DataSection
    MORTON_ENCODE_2D_X_256:
      Data.c 0, 1, 4, 5, 16, 17, 20, 21
      Data.c 64, 65, 68, 69, 80, 81, 84, 85
      Data.c 256, 257, 260, 261, 272, 273, 276, 277
      Data.c 320, 321, 324, 325, 336, 337, 340, 341
      Data.c 1024, 1025, 1028, 1029, 1040, 1041, 1044, 1045
      Data.c 1088, 1089, 1092, 1093, 1104, 1105, 1108, 1109
      Data.c 1280, 1281, 1284, 1285, 1296, 1297, 1300, 1301
      Data.c 1344, 1345, 1348, 1349, 1360, 1361, 1364, 1365
      Data.c 4096, 4097, 4100, 4101, 4112, 4113, 4116, 4117
      Data.c 4160, 4161, 4164, 4165, 4176, 4177, 4180, 4181
      Data.c 4352, 4353, 4356, 4357, 4368, 4369, 4372, 4373
      Data.c 4416, 4417, 4420, 4421, 4432, 4433, 4436, 4437
      Data.c 5120, 5121, 5124, 5125, 5136, 5137, 5140, 5141
      Data.c 5184, 5185, 5188, 5189, 5200, 5201, 5204, 5205
      Data.c 5376, 5377, 5380, 5381, 5392, 5393, 5396, 5397
      Data.c 5440, 5441, 5444, 5445, 5456, 5457, 5460, 5461
      Data.c 16384, 16385, 16388, 16389, 16400, 16401, 16404, 16405
      Data.c 16448, 16449, 16452, 16453, 16464, 16465, 16468, 16469
      Data.c 16640, 16641, 16644, 16645, 16656, 16657, 16660, 16661
      Data.c 16704, 16705, 16708, 16709, 16720, 16721, 16724, 16725
      Data.c 17408, 17409, 17412, 17413, 17424, 17425, 17428, 17429
      Data.c 17472, 17473, 17476, 17477, 17488, 17489, 17492, 17493
      Data.c 17664, 17665, 17668, 17669, 17680, 17681, 17684, 17685
      Data.c 17728, 17729, 17732, 17733, 17744, 17745, 17748, 17749
      Data.c 20480, 20481, 20484, 20485, 20496, 20497, 20500, 20501
      Data.c 20544, 20545, 20548, 20549, 20560, 20561, 20564, 20565
      Data.c 20736, 20737, 20740, 20741, 20752, 20753, 20756, 20757
      Data.c 20800, 20801, 20804, 20805, 20816, 20817, 20820, 20821
      Data.c 21504, 21505, 21508, 21509, 21520, 21521, 21524, 21525
      Data.c 21568, 21569, 21572, 21573, 21584, 21585, 21588, 21589
      Data.c 21760, 21761, 21764, 21765, 21776, 21777, 21780, 21781
      Data.c 21824, 21825, 21828, 21829, 21840, 21841, 21844, 21845

    MORTON_ENCODE_2D_Y_256:
      Data.c 0, 2, 8, 10, 32, 34, 40, 42
      Data.c 128, 130, 136, 138, 160, 162, 168, 170
      Data.c 512, 514, 520, 522, 544, 546, 552, 554
      Data.c 640, 642, 648, 650, 672, 674, 680, 682
      Data.c 2048, 2050, 2056, 2058, 2080, 2082, 2088, 2090
      Data.c 2176, 2178, 2184, 2186, 2208, 2210, 2216, 2218
      Data.c 2560, 2562, 2568, 2570, 2592, 2594, 2600, 2602
      Data.c 2688, 2690, 2696, 2698, 2720, 2722, 2728, 2730
      Data.c 8192, 8194, 8200, 8202, 8224, 8226, 8232, 8234
      Data.c 8320, 8322, 8328, 8330, 8352, 8354, 8360, 8362
      Data.c 8704, 8706, 8712, 8714, 8736, 8738, 8744, 8746
      Data.c 8832, 8834, 8840, 8842, 8864, 8866, 8872, 8874
      Data.c 10240, 10242, 10248, 10250, 10272, 10274, 10280, 10282
      Data.c 10368, 10370, 10376, 10378, 10400, 10402, 10408, 10410
      Data.c 10752, 10754, 10760, 10762, 10784, 10786, 10792, 10794
      Data.c 10880, 10882, 10888, 10890, 10912, 10914, 10920, 10922
      Data.c 32768, 32770, 32776, 32778, 32800, 32802, 32808, 32810
      Data.c 32896, 32898, 32904, 32906, 32928, 32930, 32936, 32938
      Data.c 33280, 33282, 33288, 33290, 33312, 33314, 33320, 33322
      Data.c 33408, 33410, 33416, 33418, 33440, 33442, 33448, 33450
      Data.c 34816, 34818, 34824, 34826, 34848, 34850, 34856, 34858
      Data.c 34944, 34946, 34952, 34954, 34976, 34978, 34984, 34986
      Data.c 35328, 35330, 35336, 35338, 35360, 35362, 35368, 35370
      Data.c 35456, 35458, 35464, 35466, 35488, 35490, 35496, 35498
      Data.c 40960, 40962, 40968, 40970, 40992, 40994, 41000, 41002
      Data.c 41088, 41090, 41096, 41098, 41120, 41122, 41128, 41130
      Data.c 41472, 41474, 41480, 41482, 41504, 41506, 41512, 41514
      Data.c 41600, 41602, 41608, 41610, 41632, 41634, 41640, 41642
      Data.c 43008, 43010, 43016, 43018, 43040, 43042, 43048, 43050
      Data.c 43136, 43138, 43144, 43146, 43168, 43170, 43176, 43178
      Data.c 43520, 43522, 43528, 43530, 43552, 43554, 43560, 43562
      Data.c 43648, 43650, 43656, 43658, 43680, 43682, 43688, 43690
      
    MORTON_DECODE_2D_X_256:
      Data.a 0,1,0,1,2,3,2,3,0,1,0,1,2,3,2,3
      Data.a 4,5,4,5,6,7,6,7,4,5,4,5,6,7,6,7
      Data.a 0,1,0,1,2,3,2,3,0,1,0,1,2,3,2,3
      Data.a 4,5,4,5,6,7,6,7,4,5,4,5,6,7,6,7
      Data.a 8,9,8,9,10,11,10,11,8,9,8,9,10,11,10,11
      Data.a 12,13,12,13,14,15,14,15,12,13,12,13,14,15,14,15
      Data.a 8,9,8,9,10,11,10,11,8,9,8,9,10,11,10,11
      Data.a 12,13,12,13,14,15,14,15,12,13,12,13,14,15,14,15
      Data.a 0,1,0,1,2,3,2,3,0,1,0,1,2,3,2,3
      Data.a 4,5,4,5,6,7,6,7,4,5,4,5,6,7,6,7
      Data.a 0,1,0,1,2,3,2,3,0,1,0,1,2,3,2,3
      Data.a 4,5,4,5,6,7,6,7,4,5,4,5,6,7,6,7
      Data.a 8,9,8,9,10,11,10,11,8,9,8,9,10,11,10,11
      Data.a 12,13,12,13,14,15,14,15,12,13,12,13,14,15,14,15
      Data.a 8,9,8,9,10,11,10,11,8,9,8,9,10,11,10,11
      Data.a 12,13,12,13,14,15,14,15,12,13,12,13,14,15,14,15

    MORTON_DECODE_2D_Y_256:
      Data.a 0,0,1,1,0,0,1,1,2,2,3,3,2,2,3,3
      Data.a 0,0,1,1,0,0,1,1,2,2,3,3,2,2,3,3
      Data.a 4,4,5,5,4,4,5,5,6,6,7,7,6,6,7,7
      Data.a 4,4,5,5,4,4,5,5,6,6,7,7,6,6,7,7
      Data.a 0,0,1,1,0,0,1,1,2,2,3,3,2,2,3,3
      Data.a 0,0,1,1,0,0,1,1,2,2,3,3,2,2,3,3
      Data.a 4,4,5,5,4,4,5,5,6,6,7,7,6,6,7,7
      Data.a 4,4,5,5,4,4,5,5,6,6,7,7,6,6,7,7
      Data.a 8,8,9,9,8,8,9,9,10,10,11,11,10,10,11,11
      Data.a 8,8,9,9,8,8,9,9,10,10,11,11,10,10,11,11
      Data.a 12,12,13,13,12,12,13,13,14,14,15,15,14,14,15,15
      Data.a 12,12,13,13,12,12,13,13,14,14,15,15,14,14,15,15
      Data.a 8,8,9,9,8,8,9,9,10,10,11,11,10,10,11,11
      Data.a 8,8,9,9,8,8,9,9,10,10,11,11,10,10,11,11
      Data.a 12,12,13,13,12,12,13,13,14,14,15,15,14,14,15,15
      Data.a 12,12,13,13,12,12,13,13,14,14,15,15,14,14,15,15

    MORTON_ENCODE_3D_X_256:
      Data.l $000000
      Data.l $000001,  $000008,  $000009,  $000040,  $000041,  $000048,  $000049,  $000200
      Data.l $000201,  $000208,  $000209,  $000240,  $000241,  $000248,  $000249,  $001000
      Data.l $001001,  $001008,  $001009,  $001040,  $001041,  $001048,  $001049,  $001200
      Data.l $001201,  $001208,  $001209,  $001240,  $001241,  $001248,  $001249,  $008000
      Data.l $008001,  $008008,  $008009,  $008040,  $008041,  $008048,  $008049,  $008200
      Data.l $008201,  $008208,  $008209,  $008240,  $008241,  $008248,  $008249,  $009000
      Data.l $009001,  $009008,  $009009,  $009040,  $009041,  $009048,  $009049,  $009200
      Data.l $009201,  $009208,  $009209,  $009240,  $009241,  $009248,  $009249,  $040000
      Data.l $040001,  $040008,  $040009,  $040040,  $040041,  $040048,  $040049,  $040200
      Data.l $040201,  $040208,  $040209,  $040240,  $040241,  $040248,  $040249,  $041000
      Data.l $041001,  $041008,  $041009,  $041040,  $041041,  $041048,  $041049,  $041200
      Data.l $041201,  $041208,  $041209,  $041240,  $041241,  $041248,  $041249,  $048000
      Data.l $048001,  $048008,  $048009,  $048040,  $048041,  $048048,  $048049,  $048200
      Data.l $048201,  $048208,  $048209,  $048240,  $048241,  $048248,  $048249,  $049000
      Data.l $049001,  $049008,  $049009,  $049040,  $049041,  $049048,  $049049,  $049200
      Data.l $049201,  $049208,  $049209,  $049240,  $049241,  $049248,  $049249,  $200000
      Data.l $200001,  $200008,  $200009,  $200040,  $200041,  $200048,  $200049,  $200200
      Data.l $200201,  $200208,  $200209,  $200240,  $200241,  $200248,  $200249,  $201000
      Data.l $201001,  $201008,  $201009,  $201040,  $201041,  $201048,  $201049,  $201200
      Data.l $201201,  $201208,  $201209,  $201240,  $201241,  $201248,  $201249,  $208000
      Data.l $208001,  $208008,  $208009,  $208040,  $208041,  $208048,  $208049,  $208200
      Data.l $208201,  $208208,  $208209,  $208240,  $208241,  $208248,  $208249,  $209000
      Data.l $209001,  $209008,  $209009,  $209040,  $209041,  $209048,  $209049,  $209200
      Data.l $209201,  $209208,  $209209,  $209240,  $209241,  $209248,  $209249,  $240000
      Data.l $240001,  $240008,  $240009,  $240040,  $240041,  $240048,  $240049,  $240200
      Data.l $240201,  $240208,  $240209,  $240240,  $240241,  $240248,  $240249,  $241000
      Data.l $241001,  $241008,  $241009,  $241040,  $241041,  $241048,  $241049,  $241200
      Data.l $241201,  $241208,  $241209,  $241240,  $241241,  $241248,  $241249,  $248000
      Data.l $248001,  $248008,  $248009,  $248040,  $248041,  $248048,  $248049,  $248200
      Data.l $248201,  $248208,  $248209,  $248240,  $248241,  $248248,  $248249,  $249000
      Data.l $249001,  $249008,  $249009,  $249040,  $249041,  $249048,  $249049,  $249200
      Data.l $249201,  $249208,  $249209,  $249240,  $249241,  $249248,  $249249

    ; pre-shifted table For Y coordinates (1 bit To the left)
    MORTON_ENCODE_3D_Y_256:
      Data.l $000000
      Data.l $000002,  $000010,  $000012,  $000080,  $000082,  $000090,  $000092,  $000400
      Data.l $000402,  $000410,  $000412,  $000480,  $000482,  $000490,  $000492,  $002000
      Data.l $002002,  $002010,  $002012,  $002080,  $002082,  $002090,  $002092,  $002400
      Data.l $002402,  $002410,  $002412,  $002480,  $002482,  $002490,  $002492,  $010000
      Data.l $010002,  $010010,  $010012,  $010080,  $010082,  $010090,  $010092,  $010400
      Data.l $010402,  $010410,  $010412,  $010480,  $010482,  $010490,  $010492,  $012000
      Data.l $012002,  $012010,  $012012,  $012080,  $012082,  $012090,  $012092,  $012400
      Data.l $012402,  $012410,  $012412,  $012480,  $012482,  $012490,  $012492,  $080000
      Data.l $080002,  $080010,  $080012,  $080080,  $080082,  $080090,  $080092,  $080400
      Data.l $080402,  $080410,  $080412,  $080480,  $080482,  $080490,  $080492,  $082000
      Data.l $082002,  $082010,  $082012,  $082080,  $082082,  $082090,  $082092,  $082400
      Data.l $082402,  $082410,  $082412,  $082480,  $082482,  $082490,  $082492,  $090000
      Data.l $090002,  $090010,  $090012,  $090080,  $090082,  $090090,  $090092,  $090400
      Data.l $090402,  $090410,  $090412,  $090480,  $090482,  $090490,  $090492,  $092000
      Data.l $092002,  $092010,  $092012,  $092080,  $092082,  $092090,  $092092,  $092400
      Data.l $092402,  $092410,  $092412,  $092480,  $092482,  $092490,  $092492,  $400000
      Data.l $400002,  $400010,  $400012,  $400080,  $400082,  $400090,  $400092,  $400400
      Data.l $400402,  $400410,  $400412,  $400480,  $400482,  $400490,  $400492,  $402000
      Data.l $402002,  $402010,  $402012,  $402080,  $402082,  $402090,  $402092,  $402400 
      Data.l $402402,  $402410,  $402412,  $402480,  $402482,  $402490,  $402492,  $410000
      Data.l $410002,  $410010,  $410012,  $410080,  $410082,  $410090,  $410092,  $410400
      Data.l $410402,  $410410,  $410412,  $410480,  $410482,  $410490,  $410492,  $412000
      Data.l $412002,  $412010,  $412012,  $412080,  $412082,  $412090,  $412092,  $412400
      Data.l $412402,  $412410,  $412412,  $412480,  $412482,  $412490,  $412492,  $480000
      Data.l $480002,  $480010,  $480012,  $480080,  $480082,  $480090,  $480092,  $480400
      Data.l $480402,  $480410,  $480412,  $480480,  $480482,  $480490,  $480492,  $482000
      Data.l $482002,  $482010,  $482012,  $482080,  $482082,  $482090,  $482092,  $482400
      Data.l $482402,  $482410,  $482412,  $482480,  $482482,  $482490,  $482492,  $490000
      Data.l $490002,  $490010,  $490012,  $490080,  $490082,  $490090,  $490092,  $490400
      Data.l $490402,  $490410,  $490412,  $490480,  $490482,  $490490,  $490492,  $492000
      Data.l $492002,  $492010,  $492012,  $492080,  $492082,  $492090,  $492092,  $492400
      Data.l $492402,  $492410,  $492412,  $492480,  $492482,  $492490,  $492492

    ; Pre-shifted table For z (2 bits To the left)
    MORTON_ENCODE_3D_Z_256:
      Data.l $000000
      Data.l $000004,  $000020,  $000024,  $000100,  $000104,  $000120,  $000124,  $000800
      Data.l $000804,  $000820,  $000824,  $000900,  $000904,  $000920,  $000924,  $004000
      Data.l $004004,  $004020,  $004024,  $004100,  $004104,  $004120,  $004124,  $004800
      Data.l $004804,  $004820,  $004824,  $004900,  $004904,  $004920,  $004924,  $020000
      Data.l $020004,  $020020,  $020024,  $020100,  $020104,  $020120,  $020124,  $020800
      Data.l $020804,  $020820,  $020824,  $020900,  $020904,  $020920,  $020924,  $024000
      Data.l $024004,  $024020,  $024024,  $024100,  $024104,  $024120,  $024124,  $024800
      Data.l $024804,  $024820,  $024824,  $024900,  $024904,  $024920,  $024924,  $100000
      Data.l $100004,  $100020,  $100024,  $100100,  $100104,  $100120,  $100124,  $100800
      Data.l $100804,  $100820,  $100824,  $100900,  $100904,  $100920,  $100924,  $104000
      Data.l $104004,  $104020,  $104024,  $104100,  $104104,  $104120,  $104124,  $104800
      Data.l $104804,  $104820,  $104824,  $104900,  $104904,  $104920,  $104924,  $120000
      Data.l $120004,  $120020,  $120024,  $120100,  $120104,  $120120,  $120124,  $120800
      Data.l $120804,  $120820,  $120824,  $120900,  $120904,  $120920,  $120924,  $124000
      Data.l $124004,  $124020,  $124024,  $124100,  $124104,  $124120,  $124124,  $124800
      Data.l $124804,  $124820,  $124824,  $124900,  $124904,  $124920,  $124924,  $800000
      Data.l $800004,  $800020,  $800024,  $800100,  $800104,  $800120,  $800124,  $800800
      Data.l $800804,  $800820,  $800824,  $800900,  $800904,  $800920,  $800924,  $804000
      Data.l $804004,  $804020,  $804024,  $804100,  $804104,  $804120,  $804124,  $804800
      Data.l $804804,  $804820,  $804824,  $804900,  $804904,  $804920,  $804924,  $820000
      Data.l $820004,  $820020,  $820024,  $820100,  $820104,  $820120,  $820124,  $820800
      Data.l $820804,  $820820,  $820824,  $820900,  $820904,  $820920,  $820924,  $824000
      Data.l $824004,  $824020,  $824024,  $824100,  $824104,  $824120,  $824124,  $824800 
      Data.l $824804,  $824820,  $824824,  $824900,  $824904,  $824920,  $824924,  $900000
      Data.l $900004,  $900020,  $900024,  $900100,  $900104,  $900120,  $900124,  $900800
      Data.l $900804,  $900820,  $900824,  $900900,  $900904,  $900920,  $900924,  $904000 
      Data.l $904004,  $904020,  $904024,  $904100,  $904104,  $904120,  $904124,  $904800
      Data.l $904804,  $904820,  $904824,  $904900,  $904904,  $904920,  $904924,  $920000
      Data.l $920004,  $920020,  $920024,  $920100,  $920104,  $920120,  $920124,  $920800
      Data.l $920804,  $920820,  $920824,  $920900,  $920904,  $920920,  $920924,  $924000
      Data.l $924004,  $924020,  $924024,  $924100,  $924104,  $924120,  $924124,  $924800
      Data.l $924804,  $924820,  $924824,  $924900,  $924904,  $924920,  $924924

    MORTOM_DECODE_3D_X_512:
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7
    	Data.a 4, 5, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7

    MORTOM_DECODE_3D_Y_512:
    	Data.a 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1
    	Data.a 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3
    	Data.a 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1
    	Data.a 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3
    	Data.a 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1
    	Data.a 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3
    	Data.a 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1
    	Data.a 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3
    	Data.a 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5
    	Data.a 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7
    	Data.a 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5
    	Data.a 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7
    	Data.a 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5
    	Data.a 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7
    	Data.a 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5
    	Data.a 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7
    	Data.a 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1
    	Data.a 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3
    	Data.a 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1
    	Data.a 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3
    	Data.a 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1
    	Data.a 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3
    	Data.a 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1
    	Data.a 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3
    	Data.a 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5
    	Data.a 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7
    	Data.a 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5
    	Data.a 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7
    	Data.a 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5
    	Data.a 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7
    	Data.a 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5
    	Data.a 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7

    MORTOM_DECODE_3D_Z_512:
    	Data.a 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1
    	Data.a 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1
    	Data.a 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3
    	Data.a 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3
    	Data.a 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1
    	Data.a 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1
    	Data.a 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3
    	Data.a 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3
    	Data.a 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1
    	Data.a 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1
    	Data.a 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3
    	Data.a 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3
    	Data.a 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1
    	Data.a 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1
    	Data.a 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3
    	Data.a 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3
    	Data.a 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5
    	Data.a 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5
    	Data.a 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7
    	Data.a 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7
    	Data.a 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5
    	Data.a 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5
    	Data.a 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7
    	Data.a 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7
    	Data.a 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5
    	Data.a 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5
    	Data.a 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7
    	Data.a 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7
    	Data.a 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5
    	Data.a 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5
    	Data.a 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7
    	Data.a 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7
      
    EndDataSection
  
  ; ENCODING
  Declare.i Encode2D(*p.Point2D_t)
  Declare.i Encode3D(*p.Point3D_t)
  
  ; DECODING
  Declare Decode2D(m.i, *p.Point2D_t)
  Declare Decode3D(m.i, *p.Point3D_t)
  
EndDeclareModule

; -----------------------------------------------------------------------------------
; Mortom Code Module Implementation
; -----------------------------------------------------------------------------------
Module Morton
  
  ; method To seperate bits from a given integer 3 positions apart
  Procedure SplitBy3(a.i)
    Define x.i = a & $1fffff; // we only look at the first 21 bits
    x = (x | x << 32) & $1f00000000ffff; // shift left 32 bits, OR with self, and 00011111000000000000000000000000000000001111111111111111
    x = (x | x << 16) & $1f0000ff0000ff; // shift left 32 bits, OR with self, and 00011111000000000000000011111111000000000000000011111111
    x = (x | x << 8) & $100f00f00f00f00f; // shift left 32 bits, OR with self, and 0001000000001111000000001111000000001111000000001111000000000000
    x = (x | x << 4) & $10c30c30c30c30c3; // shift left 32 bits, OR with self, and 0001000011000011000011000011000011000011000011000011000100000000
    x = (x | x << 2) & $1249249249249249;
    ProcedureReturn x
  EndProcedure

  Procedure MagicBits(x, y, z)
    Define answer = 0
    answer | SplitBy3(x) | SplitBy3(y) << 1 | SplitBy3(z) << 2
    ProcedureReturn answer;
  EndProcedure

  
  ;----------------------------------------------------------------------------------
  ; Morton 2D
  ;----------------------------------------------------------------------------------
  Procedure.i Encode2D(*p.Point2D_t)
    Protected answer.i = 0
    Protected index = 4
    Protected shift.i
    While index > 0
      shift = (index - 1) * 8
      answer = answer << 16 | 
               PeekC(?MORTON_ENCODE_2D_Y_256 + ((*p\y >> shift) & #EIGHTBIT2DMASK)*2)|
               PeekC(?MORTON_ENCODE_2D_X_256 + ((*p\x >> shift) & #EIGHTBIT2DMASK)*2)
      index - 1
    Wend  
    ProcedureReturn answer
  EndProcedure
  
  Procedure.l Decode2D_LUT256(m.i, *LUT, startshift.i)
	  Protected i.i, a.l = 0
	  Protected loops.i = 8
	  Protected index.l
	  For i=0 To loops-1
	    index = (m >> ((i * 8) + startshift)) & #EIGHTBIT2DMASK
	    a | (PeekA(*LUT + index) << (4 * i))
	  Next
	  ProcedureReturn a
	EndProcedure
	
	Procedure Decode2D(m.i, *p.Point2D_t)
	  *p\x = Decode2D_LUT256(m, ?MORTON_DECODE_2D_X_256, 0)
	  *p\y = Decode2D_LUT256(m, ?MORTON_DECODE_2D_Y_256, 0)
	EndProcedure
	
	;----------------------------------------------------------------------------------
  ; Morton 3D
  ;----------------------------------------------------------------------------------
	Procedure.i Encode3D(*p.Point3D_t)
; 	  Define answer = 0
;     answer | SplitBy3(*p\x) | SplitBy3(*p\y) << 1 | SplitBy3(*p\z) << 2
;     ProcedureReturn answer
	  
	  Protected answer.i = 0
	  Protected index = 4
	  Protected shift.i
	  While  index > 0
	    shift = (index - 1) * 8
; 	    answer = answer << 24 | (PeekL(?MORTON_ENCODE_3D_Z_256 + ((*p\z >> shift) & #EIGHTBIT3DMASK)*4) | 
; 	                             PeekL(?MORTON_ENCODE_3D_Y_256 + ((*p\y >> shift) & #EIGHTBIT3DMASK)*4) |
; 	                             PeekL(?MORTON_ENCODE_3D_X_256 + ((*p\x >> shift) & #EIGHTBIT3DMASK)*4))
	    answer = answer << 24 | (PeekL(?MORTON_ENCODE_3D_Z_256 + ((*p\z >> shift) & #EIGHTBIT3DMASK)*4) | 
	                             PeekL(?MORTON_ENCODE_3D_Y_256 + ((*p\y >> shift) & #EIGHTBIT3DMASK)*4) |
	                             PeekL(?MORTON_ENCODE_3D_X_256 + ((*p\x >> shift) & #EIGHTBIT3DMASK)*4))
	    index - 1
	  Wend
	  answer | 1 << 63
	  ProcedureReturn answer
	EndProcedure
	
	Procedure Decode3D_LUT256(m.i, *LUT, startshift.i)
	  Protected i.i, a.l = 0
	  Protected loops.i = 7
	  For i=0 To loops -1
	    a|(PeekA(*LUT +   (m >> ((i * 9) + startshift)) & #NINEBIT3DMASK) << (3*i))
	  Next
	  ProcedureReturn a
	EndProcedure
	
	Procedure  Decode3D(m.i, *p.Point3D_t)
	  *p\x = Decode3D_LUT256(m, ?MORTOM_DECODE_3D_X_512, 0)
	  *p\y = Decode3D_LUT256(m, ?MORTOM_DECODE_3D_Y_512, 0)
	  *p\z = Decode3D_LUT256(m, ?MORTOM_DECODE_3D_Z_512, 0)
	EndProcedure
	
	; ----------------------------------------------------------------------------------------------------------
  ; Minimum Morton Code
	;-----------------------------------------------------------------------------------------------------------
	Procedure Minimum3D(lhs.i, rhs.i) 
	  
	EndProcedure
	
;    // Isolate the encoded coordinates.
;    unsigned int lhsX = lhs & 0x55555555; // lhsX = -f-e -d-c -b-a -9-8 -7-6 -5-4 -3-2 -1-0
;    unsigned int rhsX = rhs & 0x55555555; // rhsX = -f-e -d-c -b-a -9-8 -7-6 -5-4 -3-2 -1-0
;    unsigned int lhsY = lhs & 0xAAAAAAAA; // lhsY = f-e- d-c- b-a- 9-8- 7-6- 5-4- 3-2- 1-0-
;    unsigned int rhsY = rhs & 0xAAAAAAAA; // rhsY = f-e- d-c- b-a- 9-8- 7-6- 5-4- 3-2- 1-0-
; 
;    // Find the minimum of the encoded coordinates And combine them into a single word.
;    Return Min(lhsX, rhsX) + Min(lhsY, rhsY);
; }
	
	Procedure NextPoint(*p.Point3D_t, *o.Point3D_t)
	  Define b = 1
	  *o\x = *p\x
	  *o\y = *p\y
	  *o\z = *p\z
    While b
      *o\x = Pow(*o\x,b)
      b & ~*o\x
      *o\y = Pow(*o\y,b)
      b & ~*o\y
      *o\z = Pow(*o\z,b)
      b & ~*o\z
      b << 1
    Wend
  EndProcedure
  
  Procedure PreviousPoint(*p.Point3D_t, *o.Point3D_t)
	  Define b = 1
	  *o\x = *p\x
	  *o\y = *p\y
	  *o\z = *p\z
    While b
      *o\x = Pow(*o\x,b)
      b & *o\x
      *o\y = Pow(*o\y,b)
      b & *o\y
      *o\z = Pow(*o\z,b)
      b & *o\z
      b << 1
    Wend
  EndProcedure
  
  Procedure Difference(code1, code2, axis)
    
  EndProcedure
  
  
; 	;----------------------------------------------------------------------------------
;   ; Morton 3D To Hilbert 3D
;   ;----------------------------------------------------------------------------------
; 	Procedure MortonToHilbert3D( morton.i, bits.i )
;     Define hilbert.i = morton
;     If bits > 1
;       Define block.i = ( ( bits * 3 ) - 3 )
;       Define hcode = ( ( hilbert >> block ) & 7 )
;       Define mcode, shift, signs
;       shift = 0
;       signs = 0
;       While block > 0
;         block - 3
;         hcode << 2
;         mcode = ( $20212021 >> hcode ) & 3
;         shift = ( $48 >> ( 7 - shift - mcode ) ) & 3 
;         signs = ( signs | ( signs << 3 ) ) >> mcode 
;         signs = ( Int(Pow(signs, ( $53560300 >> hcode ) )) & 7 
;         mcode = ( hilbert >> block ) & 7 
;         hcode = mcode
;         hcode = ( ( hcode | ( hcode << 3 ) ) >> shift ) & 7 
;         hcode = Int(Pow(hcode, signs))
;         hilbert = Int(Pow(hilbert, Int(Pow( mcode, hcode)) ) << block ))
;       Wend  
;     EndIf
;     
;     hilbert = Int(Pow(hilbert,  ( hilbert >> 1 ) & $92492492 ))
;     hilbert = Int(Pow(hilbert, ( hilbert & $92492492 ) >> 1 ))
;     ProcedurReturn hilbert 
;   EndProcedure
;   
;   ;----------------------------------------------------------------------------------
;   ; Hilbert3D To Morton  3D
;   ;----------------------------------------------------------------------------------
;   Procedure HilbertToMorton3D( hilbert.i, bits.i )
;       uint morton = hilbert
;       morton = Int(Pow(morton, ( morton & $92492492 ) >> 1 ))
;       morton = Int(Pow(morton, ( morton >> 1 ) & $92492492 ))
;       If bits > 1
;         Define block = ( bits * 3 ) - 3 
;         Define hcode = ( morton >> block ) & 7
;         Define mcode, shift, signs
;         shift = 0
;         signs = 0
;         While block > 0
;           block - 3
;           hcode << 2
;           mcode = ( ( $20212021 >> hcode ) & 3 )
;           shift = ( ( $48 >> ( 4 - shift + mcode ) ) & 3 )
;           signs = ( ( signs | ( signs << 3 ) ) >> mcode )
;           signs = ( Int(Pow(signs, ( $53560300 >> hcode ) )) & 7 
;           hcode = ( morton >> block ) & 7
;           mcode = hcode
;           mcode = Int(Pow(mcode, signs))
;           mcode = ( ( ( mcode | ( mcode << 3 ) ) >> shift ) & 7 )
;           morton = Int(Pow(morton, Int(Pow(hcode, mcode))  << block ))
;         Wend
;       EndIf
;       ProcedureReturn morton 
;   EndProcedure
	 
EndModule





; IDE Options = PureBasic 5.62 (Windows - x64)
; CursorPosition = 449
; FirstLine = 412
; Folding = ---
; EnableXP